{"version":3,"file":"src_pages_UserSinglPage_index_ts.7aa72fdb674fa0e11514.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA0B;AACgC;AACR;AACgB;AAC/B;AACoB;AAAA;AAEvD,MAAMW,cAAwB,GAAG,MAAM;EACrC,MAAM;IAAEC;EAAG,CAAC,GAAGV,2DAAS,EAAE;EAC1B,MAAM;IAAEW,IAAI;IAAEC;EAAO,CAAC,GAAGJ,wDAAW,CAACJ,mDAAU,CAAC;EAChD,MAAMS,YAAgC,GAAGH,EAAE,GAAGA,EAAE,GAAGC,IAAI,CAACG,GAAG;EAC3D,MAAM;IAAEC,IAAI,EAAEC,QAAQ;IAAEC,SAAS,EAAEC;EAAW,CAAC,GAC/CjB,4EAAgC,CAACU,IAAI,CAACG,GAAG,EAAE;IACzCM,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM;IAAEL,IAAI,EAAEM,QAAQ;IAAEJ;EAAU,CAAC,GAAGhB,4EAAgC,CACpEY,YAAY,EACZ;IACEO,eAAe,EAAE;EACnB,CAAC,CACA;EACD,MAAME,SAAS,GAAGd,wDAAW,CAACH,oDAAW,CAAC;EAC5C,MAAMkB,MAAM,GAAG;IAAE,GAAGD,SAAS;IAAEX,IAAI,EAAED,EAAE,GAAGA,EAAE,GAAGC,IAAI,CAACG;EAAI,CAAC;EACzD,MAAM;IACJC,IAAI,EAAES,SAAS,GAAG,EAAE;IACpBP,SAAS,EAAEQ,WAAW;IACtBC;EACF,CAAC,GAAGxB,uEAA2B,CAACqB,MAAM,CAAC;EACvC,MAAM;IAAER,IAAI,EAAEa,WAAW;IAAEX,SAAS,EAAEY;EAAS,CAAC,GAChD3B,6EAAiC,CAACqB,MAAM,CAAC;EACzC,MAAM;IAAER,IAAI,EAAEgB,iBAAiB,GAAG,EAAE;IAAEd,SAAS,EAAEe;EAAoB,CAAC,GACtE9B,oEAAwB,CAAC;IAAEgC,UAAU,EAAEZ,SAAS,CAACa;EAAO,CAAC,CAAC;EAC1D;EACA,MAAMC,QAAQ,GAAG7B,wDAAW,EAAE;EAC9B,MAAM8B,QAAQ,GAAGtC,6DAAW,EAAE;EAE9BD,sDAAe,CAAC,MAAM;IACpB,IAAI,CAACc,MAAM,EAAE;MACXyB,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;EAENvC,sDAAe,CAAC,MAAM;IACpB,IAAI,CAACoB,UAAU,IAAIF,QAAQ,EAAE;MAC3BoB,QAAQ,CAACjC,0EAAiC,CAACa,QAAQ,CAAC,CAAC;MACrDoB,QAAQ,CAACjC,kEAAyB,EAAE,CAAC;IACvC,CAAC,MAAM;MACLiC,QAAQ,CAACjC,kEAAyB,EAAE,CAAC;IACvC;EACF,CAAC,EAAE,CAACa,QAAQ,CAAC,CAAC;;EAEd;EACE;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,UACC,CAACC,SAAS,IACT,CAACY,QAAQ,IACTD,WAAW,IACX,CAACF,OAAO,IACR,CAACD,WAAW,IACZJ,QAAQ,IACR,CAACW,mBAAmB,IACpBD,iBAAiB,iBACf,uDAAC,6CAAK;MACJ,iBAAiB,EAAEA,iBAAkB;MACrC,WAAW,EAAEH,WAAY;MACzB,MAAM,EAAEf,YAAa;MACrB,UAAU,EAAEQ,QAAS;MACrB,SAAS,EAAEG;IAAU;EAExB,EACC;AAEV,CAAC;AAEM,MAAMkB,aAAa,gBAAG5C,iDAAU,CAACW,cAAc,CAAC","sources":["webpack://react-webpack/./src/pages/UserSinglPage/UserSinglPage.tsx","webpack://react-webpack/./src/pages/UserSinglPage/index.ts"],"sourcesContent":["import React from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { authApi, postApi } from \"store/rtkQuery\";\r\nimport { authAction, selectAuth, selectPosts } from \"store/slice\";\r\nimport { Posts } from \"components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst FUserSinglPage: React.FC = () => {\r\n  const { id } = useParams();\r\n  const { auth, status } = useSelector(selectAuth);\r\n  const userTargetId: string | undefined = id ? id : auth._id;\r\n  const { data: authData, isLoading: isLoadAuth } =\r\n  authApi.useGetUserSinglPageQuery(auth._id, {\r\n    pollingInterval: 10000,\r\n  });\r\n  const { data: userData, isLoading } = authApi.useGetUserSinglPageQuery(\r\n    userTargetId,\r\n    {\r\n      pollingInterval: 10000,\r\n    }\r\n    );\r\n    const postState = useSelector(selectPosts);\r\n  const params = { ...postState, auth: id ? id : auth._id };\r\n  const {\r\n    data: userPosts = [],\r\n    isLoading: isLUserPost,\r\n    isError,\r\n  } = postApi.useGetUserPostQuery(params);\r\n  const { data: totalLength, isLoading: isLength } =\r\n  postApi.useGetUserPostLengthQuery(params);\r\n  const { data: globalSearchPosts = [], isLoading: isGlobalPostLoading } =\r\n  postApi.useGetPostsQuery({ searchPost: postState.search });\r\n  // const [setAuthOnline, {}] = authApi.useSetOnlineMutation()\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  \r\n  React.useEffect(() => {\r\n    if (!status) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (!isLoadAuth && authData) {\r\n      dispatch(authAction.getAutchRequestFriends(authData));\r\n      dispatch(authAction.getAutchOnline());\r\n    } else {\r\n      dispatch(authAction.getAutchOfline());\r\n    }\r\n  }, [authData]);\r\n  \r\n  //  const setStatusAuthOnline = async (status: boolean) => {\r\n    //    await setAuthOnline({status})\r\n    //    .unwrap()\r\n    //    .then(res => console.log(res))\r\n    //    .catch(error => console.log(error))\r\n    //   }\r\n    \r\n    return (\r\n      <div>\r\n      {!isLoading &&\r\n        !isLength &&\r\n        totalLength &&\r\n        !isError &&\r\n        !isLUserPost &&\r\n        userData &&\r\n        !isGlobalPostLoading &&\r\n        globalSearchPosts && (\r\n          <Posts\r\n            globalSearchPosts={globalSearchPosts}\r\n            totalLength={totalLength}\r\n            userId={userTargetId}\r\n            userTarger={userData}\r\n            userPosts={userPosts}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const UserSinglPage = React.memo(FUserSinglPage);\r\n","export {UserSinglPage as default} from './UserSinglPage';"],"names":["React","useNavigate","useParams","authApi","postApi","authAction","selectAuth","selectPosts","Posts","useDispatch","useSelector","FUserSinglPage","id","auth","status","userTargetId","_id","data","authData","isLoading","isLoadAuth","useGetUserSinglPageQuery","pollingInterval","userData","postState","params","userPosts","isLUserPost","isError","useGetUserPostQuery","totalLength","isLength","useGetUserPostLengthQuery","globalSearchPosts","isGlobalPostLoading","useGetPostsQuery","searchPost","search","dispatch","navigate","useEffect","getAutchRequestFriends","getAutchOnline","getAutchOfline","UserSinglPage","memo","default"],"sourceRoot":""}